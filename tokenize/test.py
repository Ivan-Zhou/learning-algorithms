from bpe import BytePairEncoding

import unittest


class TestBPE(unittest.TestCase):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)
        self.training_corpus = [
            "Byte Pair Encoding (BPE) is a data compression technique that is commonly used in natural language processing (NLP) tasks.",
            "The BPE algorithm works by iteratively replacing the most frequent pair of bytes (or characters) in a given text with a new, unused byte.",
            "This process is repeated until a certain number of merge operations have been performed or a desired vocabulary size has been reached.",
            "The algorithm was proposed by Phil Gage in 1994 and has since been widely adopted in many NLP systems.",
        ]
        self.test_corpus = [
            "BPE has been shown to be effective in reducing the size of large language models, such as GPT-2 and BERT, while maintaining their performance.",
            "By iteratively merging the most frequent pair of bytes in a text, BPE can significantly reduce its size while maintaining its meaning and structure.",
        ]
        self.target_vocab_size = 100
        self.bpe = BytePairEncoding(target_vocab_size=self.target_vocab_size)
        self.bpe.fit(self.training_corpus)

    def test_fit(self):
        self.assertEqual(len(self.bpe.vocab), self.target_vocab_size)
        expected_pairs_to_merge = [
            ("t", "e"),
            ("i", "n"),
            ("Ġ", "a"),
            ("Ġ", "b"),
            ("r", "e"),
            ("o", "r"),
            ("a", "t"),
            ("t", "h"),
            ("e", "d"),
            ("Ġ", "p"),
            ("e", "n"),
            ("e", "r"),
            ("Ġ", "i"),
            ("Ġ", "c"),
            ("Ġ", "in"),
            ("a", "s"),
            ("Ġ", "w"),
            ("Ġb", "y"),
            ("in", "g"),
            ("Ġ", "("),
            ("Ġi", "s"),
            ("s", "s"),
            ("o", "n"),
            ("l", "y"),
            ("Ġ", "u"),
            ("s", "ed"),
            ("Ġ", "n"),
            ("l", "a"),
            ("g", "e"),
            ("Ġp", "r"),
            ("Ġpr", "o"),
            ("c", "e"),
            ("T", "h"),
            ("i", "th"),
            ("Ġ", "re"),
            ("Ġ", "m"),
            ("Ġ", "o"),
            ("Ġ", "h"),
            ("Ġb", "e"),
            ("Ġbe", "en"),
            ("Ġ", "s"),
            ("Ġ", "P"),
            ("a", "i"),
            ("ai", "r"),
            ("B", "P"),
            ("BP", "E"),
            ("Ġ", "d"),
            ("Ġc", "o"),
            ("Ġco", "m"),
            ("i", "on"),
            ("Ġ", "te"),
            ("c", "h"),
            ("q", "u"),
            ("Ġ", "th"),
            ("r", "a"),
            ("a", "ge"),
            ("Ġpro", "ce"),
            ("Ġproce", "ss"),
            ("N", "L"),
        ]
        self.assertEqual(len(self.bpe.pairs_to_merge), len(expected_pairs_to_merge))
        for pair in expected_pairs_to_merge:
            self.assertIn(pair, self.bpe.pairs_to_merge)

    def test_encode(self):
        output = self.bpe.tokenize(self.test_corpus[0])
        expected_encoded_text = [
            "BPE",
            "Ġh",
            "as",
            "Ġbeen",
            "Ġs",
            "h",
            "o",
            "w",
            "n",
            "Ġ",
            "t",
            "o",
            "Ġbe",
            "Ġ",
            "e",
            "f",
            "f",
            "e",
            "c",
            "t",
            "i",
            "v",
            "e",
            "Ġin",
            "Ġre",
            "d",
            "u",
            "c",
            "ing",
            "Ġth",
            "e",
            "Ġs",
            "i",
            "z",
            "e",
            "Ġo",
            "f",
            "Ġ",
            "la",
            "r",
            "ge",
            "Ġ",
            "la",
            "n",
            "g",
            "u",
            "age",
            "Ġm",
            "o",
            "d",
            "e",
            "l",
            "s",
            ",",
            "Ġs",
            "u",
            "ch",
            "Ġa",
            "s",
            "Ġ",
            "G",
            "P",
            "T",
            "-",
            "2",
            "Ġa",
            "n",
            "d",
            "Ġ",
            "B",
            "E",
            "R",
            "T",
            "Ġw",
            "h",
            "i",
            "l",
            "e",
            "Ġm",
            "a",
            "in",
            "t",
            "a",
            "in",
            "ing",
            "Ġth",
            "e",
            "i",
            "r",
            "Ġp",
            "er",
            "f",
            "or",
            "m",
            "a",
            "n",
            "ce",
            ".",
        ]
        self.assertEqual(output, expected_encoded_text)
        output = self.bpe.tokenize(self.test_corpus[1])
        expected_encoded_text = [
            "B",
            "y",
            "Ġi",
            "te",
            "r",
            "at",
            "i",
            "v",
            "e",
            "ly",
            "Ġm",
            "er",
            "g",
            "ing",
            "Ġth",
            "e",
            "Ġm",
            "o",
            "s",
            "t",
            "Ġ",
            "f",
            "re",
            "qu",
            "en",
            "t",
            "Ġp",
            "air",
            "Ġo",
            "f",
            "Ġby",
            "te",
            "s",
            "Ġin",
            "Ġa",
            "Ġte",
            "x",
            "t",
            ",",
            "Ġ",
            "BPE",
            "Ġc",
            "a",
            "n",
            "Ġs",
            "i",
            "g",
            "n",
            "i",
            "f",
            "i",
            "c",
            "a",
            "n",
            "t",
            "ly",
            "Ġre",
            "d",
            "u",
            "ce",
            "Ġi",
            "t",
            "s",
            "Ġs",
            "i",
            "z",
            "e",
            "Ġw",
            "h",
            "i",
            "l",
            "e",
            "Ġm",
            "a",
            "in",
            "t",
            "a",
            "in",
            "ing",
            "Ġm",
            "e",
            "a",
            "n",
            "ing",
            "Ġa",
            "n",
            "d",
            "Ġs",
            "t",
            "r",
            "u",
            "c",
            "t",
            "u",
            "re",
            ".",
        ]
        self.assertEqual(output, expected_encoded_text)


if __name__ == "__main__":
    unittest.main()
